<?php

namespace App\Models;
use Carbon\Carbon;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Spatie\Activitylog\Traits\LogsActivity;
use Spatie\Activitylog\LogOptions;
use Carbon\Carbon;

class Cours extends Model
{
    use HasFactory, LogsActivity;

    protected $fillable = [
        'nom',
        'description',
        'ecole_id',
        'session_id',
        'date_debut',
        'date_fin',
        'places_max',
        'tarification_info',
        'actif',
        'jours'
    ];

    protected $casts = [
        'date_debut' => 'date',
        'date_fin' => 'date',
        'jours' => 'array',
        'actif' => 'boolean',
        'places_max' => 'integer'
    ];

    protected $appends = ['date_debut_format', 'date_fin_format'];

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->logOnly(['nom', 'actif', 'places_max'])
            ->logOnlyDirty()
            ->dontSubmitEmptyLogs();
    }

    public function ecole()
    {
        return $this->belongsTo(Ecole::class);
    }

    public function session()
    {
        return $this->belongsTo(CoursSession::class, 'session_id');
    }

    public function horaires()
    {
        return $this->hasMany(CoursHoraire::class)->orderByRaw("FIELD(jour, 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'), heure_debut");
    }

    public function inscriptions()
    {
        return $this->hasMany(InscriptionCours::class);
    }

    public function membres()
    {
        return $this->belongsToMany(Membre::class, 'inscriptions_cours')
            ->withPivot(['session_id', 'date_inscription', 'statut'])
            ->withTimestamps();
    }

    // Formatage des dates
    public function getDateDebutFormatAttribute()
    {
        return $this->date_debut ? $this->date_debut->format('d/m/Y') : '';
    }

    public function getDateFinFormatAttribute()
    {
        return $this->date_fin ? $this->date_fin->format('d/m/Y') : '';
    }

    // Helpers
    public function getJoursFormatesAttribute()
    {
        $joursMap = [
            'lundi' => 'Lun',
            'mardi' => 'Mar',
            'mercredi' => 'Mer',
            'jeudi' => 'Jeu',
            'vendredi' => 'Ven',
            'samedi' => 'Sam',
            'dimanche' => 'Dim'
        ];
        
        $horairesByDay = $this->horaires->groupBy('jour');
        $result = [];
        
        foreach ($horairesByDay as $jour => $horaires) {
            $day = $joursMap[$jour] ?? ucfirst($jour);
            $times = $horaires->map(function($h) {
                return Carbon::parse($h->heure_debut)->format('H:i') . '-' . Carbon::parse($h->heure_fin)->format('H:i');
            })->join(', ');
            $result[] = $day . ' ' . $times;
        }
        
        return implode(' | ', $result);
    }

    public function getPlacesDisponiblesAttribute()
    {
        if (!$this->places_max) {
            return null; // Illimité
        }
        
        $inscrits = $this->inscriptions()
            ->where('statut', 'confirmee')
            ->count();
            
        return max(0, $this->places_max - $inscrits);
    }

    public function duplicate()
    {
        $newCours = $this->replicate();
        $newCours->nom = $this->nom . ' (Copie)';
        $newCours->actif = false;
        $newCours->save();
        
        // Copier les horaires
        foreach ($this->horaires as $horaire) {
            $newHoraire = $horaire->replicate();
            $newHoraire->cours_id = $newCours->id;
            $newHoraire->save();
        }
        
        return $newCours;
    }

    // Scopes
    public function scopeActifs($query)
    {
        return $query->where('actif', true);
    }

    public function scopePourEcole($query, $ecoleId)
    {
        return $query->where('ecole_id', $ecoleId);
    }

    public function scopePourSession($query, $sessionId)
    {
        return $query->where('session_id', $sessionId);
    }
}

    // Accesseurs pour les dates formatées
    public function getDateDebutFormatAttribute()
    {
        return $this->date_debut ? Carbon::parse($this->date_debut)->format('d/m/Y') : null;
    }

    public function getDateFinFormatAttribute()
    {
        return $this->date_fin ? Carbon::parse($this->date_fin)->format('d/m/Y') : null;
    }

    // Accesseur pour les places disponibles
    public function getPlacesDisponiblesAttribute()
    {
        if (!$this->places_max) {
            return null;
        }
        $inscrites = $this->inscriptions()->where('statut', 'confirmee')->count();
        return max(0, $this->places_max - $inscrites);
    }

    // Méthode pour dupliquer un cours
    public function duplicate()
    {
        $newCours = $this->replicate();
        $newCours->nom = $this->nom . ' (Copie)';
        $newCours->save();
        
        // Dupliquer les horaires
        foreach ($this->horaires as $horaire) {
            $newCours->horaires()->create($horaire->toArray());
        }
        
        return $newCours;
    }
