<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the ecoles for the user.
     */
    public function ecoles()
    {
        return $this->hasMany(Ecole::class);
    }

    /**
     * Check if user has a specific role (compatibility method)
     */
    public function hasRole($role)
    {
        // Si vous utilisez un champ 'role' simple dans la DB
        if ($this->role) {
            return $this->role === $role;
        }
        
        // Sinon, utiliser Spatie Permission
        return $this->hasRole($role);
    }

    /**
     * Check if user is a superadmin
     */
    public function isSuperAdmin()
    {
        return $this->role === 'superadmin' || $this->hasRole('superadmin');
    }

    /**
     * Check if user is an admin
     */
    public function isAdmin()
    {
        return in_array($this->role, ['admin', 'superadmin']) || 
               $this->hasRole('admin') || 
               $this->hasRole('superadmin');
    }
}
